{"version":3,"sources":["webpack:///./src/app/shop/shop.module.ts","webpack:///./src/app/shop/shop.page.html","webpack:///./src/app/shop/shop.page.scss","webpack:///./src/app/shop/shop.page.ts"],"names":[],"mappings":"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","file":"shop-shop-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ShopPage } from './shop.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ShopPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ShopPage]\n})\nexport class ShopPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"danger\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button color=\\\"light\\\"></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      Shop\\n    </ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button routerLink=\\\"/cart\\\">\\n        <ion-icon name=\\\"cart\\\"></ion-icon>\\n        <ion-badge *ngIf=\\\"cart.length >= 1\\\" mode=\\\"ios\\\" color=\\\"primary\\\" slot=\\\"end\\\">{{cart.length}}</ion-badge>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-segment color=\\\"danger\\\" [scrollable]=\\\"true\\\" mode=\\\"ios\\\" (ionChange)=\\\"switch($event)\\\">\\n  <ion-segment-button mode=\\\"ios\\\" value=\\\"wears\\\" [checked]=\\\"true\\\" layout=\\\"icon-start\\\">\\n    <ion-label>Wears</ion-label>\\n    <ion-icon name=\\\"shirt\\\"></ion-icon>\\n  </ion-segment-button>\\n  <ion-segment-button mode=\\\"ios\\\" value=\\\"groceries\\\" layout=\\\"icon-start\\\">\\n    <ion-label>Groceries</ion-label>\\n    <ion-icon name=\\\"pizza\\\"></ion-icon>\\n  </ion-segment-button>\\n</ion-segment>\\n\\n<ion-content color=\\\"light\\\">\\n  <div id=\\\"wears\\\" #wears>\\n\\n    <ion-card *ngIf=\\\"wearItems.length < 1\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col>\\n            <ion-item lines=\\\"none\\\">\\n              <ion-icon name=\\\"sad\\\" slot=\\\"start\\\" color=\\\"medium\\\"></ion-icon>\\n              <ion-label color=\\\"medium\\\">Empty Store</ion-label>\\n            </ion-item>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card>\\n\\n    <ion-card *ngFor=\\\"let wear of wearItems\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col size=\\\"2\\\">\\n            <ion-icon class=\\\"media\\\" color=\\\"danger\\\" name=\\\"business\\\"></ion-icon>\\n          </ion-col>\\n          <ion-col size=\\\"10\\\" wrap=\\\"no-wrap\\\">\\n            <ion-item lines=\\\"none\\\">\\n              <ion-label color=\\\"danger\\\">{{wear.name}}</ion-label>\\n            </ion-item>\\n            <ion-row>\\n              <ion-col>\\n                <ion-label class=\\\"price\\\">&#8358;{{currency.formatCurrency(wear.price)}}</ion-label>\\n              </ion-col>\\n              <ion-col>\\n                <ion-button *ngIf=\\\"!cartItems.includes(wear.id)\\\" expand=\\\"full\\\" (click)=\\\"addToCart(wear)\\\" shape=\\\"round\\\" color=\\\"{{wear.quantity === 0 ? 'danger' : 'danger'}}\\\" size=\\\"small\\\" [disabled]=\\\"!!(wear.quantity === 0)\\\">\\n                  <ion-icon name=\\\"cart\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label>{{wear.quantity === 0 ? 'Out' : 'Buy'}}</ion-label>\\n                </ion-button>\\n                <ion-button *ngIf=\\\"cartItems.includes(wear.id)\\\" routerLink=\\\"/cart\\\" expand=\\\"full\\\" shape=\\\"round\\\" color=\\\"success\\\" size=\\\"small\\\">\\n                  <ion-icon name=\\\"cart\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label>Cart</ion-label>\\n                </ion-button>\\n              </ion-col>\\n            </ion-row>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card>\\n  </div>\\n\\n  <div id=\\\"groceries\\\" #groceries>\\n\\n    <ion-card *ngIf=\\\"groceriesItems.length < 1\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col>\\n            <ion-item lines=\\\"none\\\">\\n              <ion-icon name=\\\"sad\\\" slot=\\\"start\\\" color=\\\"medium\\\"></ion-icon>\\n              <ion-label color=\\\"medium\\\">Empty Store</ion-label>\\n            </ion-item>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card>\\n\\n    <ion-card *ngFor=\\\"let groceries of groceriesItems\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col size=\\\"2\\\">\\n            <ion-icon class=\\\"media\\\" color=\\\"danger\\\" name=\\\"pizza\\\"></ion-icon>\\n          </ion-col>\\n          <ion-col size=\\\"10\\\" wrap=\\\"no-wrap\\\">\\n            <ion-item lines=\\\"none\\\">\\n              <ion-label color=\\\"danger\\\">{{groceries.name}}</ion-label>\\n            </ion-item>\\n            <ion-row>\\n              <ion-col>\\n                <ion-label class=\\\"price\\\">&#8358;{{currency.formatCurrency(groceries.price)}}</ion-label>\\n              </ion-col>\\n              <ion-col>\\n                <ion-button *ngIf=\\\"!cartItems.includes(groceries.id)\\\" expand=\\\"full\\\" (click)=\\\"addToCart(groceries)\\\" shape=\\\"round\\\" color=\\\"{{groceries.quantity === 0 ? 'danger' : 'danger'}}\\\" size=\\\"small\\\" [disabled]=\\\"!!(groceries.quantity === 0)\\\">\\n                  <ion-icon name=\\\"cart\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label>{{groceries.quantity === 0 ? 'Out' : 'Buy'}}</ion-label>\\n                </ion-button>\\n                <ion-button *ngIf=\\\"cartItems.includes(groceries.id)\\\" routerLink=\\\"/cart\\\" expand=\\\"full\\\" shape=\\\"round\\\" color=\\\"success\\\" size=\\\"small\\\">\\n                  <ion-icon name=\\\"card\\\" slot=\\\"start\\\"></ion-icon>\\n                  <ion-label>Pay</ion-label>\\n                </ion-button>\\n              </ion-col>\\n            </ion-row>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card>\\n  </div>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3Nob3Avc2hvcC5wYWdlLnNjc3MifQ== */\"","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {ControllerService} from '../services/controller.service';\nimport {ConstantsService} from '../services/constants.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-shop',\n  templateUrl: './shop.page.html',\n  styleUrls: ['./shop.page.scss'],\n})\nexport class ShopPage implements OnInit {\n\n  @ViewChild('wears') wears: ElementRef;\n  @ViewChild('groceries') groceries: ElementRef;\n  items: any[] = Object.values(this.api.getProducts());\n  wearItems = [];\n  groceriesItems = [];\n  cart: [] = this.api.getCart();\n  cartItems = [];\n\n  constructor(private api: ControllerService, private router: Router, private currency: ConstantsService) { }\n\n  ngOnInit() {\n    this.categoriesProducts();\n    this.initCartItems();\n  }\n\n  categoriesProducts() {\n    this.wearItems = [];\n    this.groceriesItems = [];\n\n    this.items.forEach((item: any) => {\n      if (item.category === 'wears') {\n        this.wearItems.push(item);\n      } else if (item.category === 'groceries') {\n        this.groceriesItems.push(item);\n      }\n    });\n  }\n\n  initCartItems() {\n    this.cartItems = [];\n    this.cart.forEach((value: any) => {\n      this.cartItems.push(value.id);\n    });\n  }\n\n  switch($event: CustomEvent) {\n    if ($event.detail.value === 'wears') {\n      this.wears.nativeElement.style.display = 'block';\n      this.groceries.nativeElement.style.display = 'none';\n    } else {\n      this.wears.nativeElement.style.display = 'none';\n      this.groceries.nativeElement.style.display = 'block';\n    }\n  }\n\n  addToCart(item: any) {\n    this.api.addToCart({\n      name: item.name,\n      price: item.price,\n      quantity: 1,\n      available: item.quantity,\n      category: item.category,\n      id: item.id,\n    });\n    this.cart = this.api.getCart();\n    this.initCartItems();\n  }\n\n}\n"],"sourceRoot":""}