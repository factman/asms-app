{"version":3,"sources":["webpack:///./src/app/cart/cart.module.ts","webpack:///./src/app/cart/cart.page.html","webpack:///./src/app/cart/cart.page.scss","webpack:///./src/app/cart/cart.page.ts"],"names":[],"mappings":"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","file":"cart-cart-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CartPage } from './cart.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CartPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CartPage]\n})\nexport class CartPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"danger\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button color=\\\"light\\\"></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      Shopping Cart\\n    </ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button routerLink=\\\"/cart\\\">\\n        <ion-icon name=\\\"cart\\\"></ion-icon>\\n        <ion-badge *ngIf=\\\"cart.length >= 1\\\" mode=\\\"ios\\\" color=\\\"primary\\\" slot=\\\"end\\\">{{cart.length}}</ion-badge>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<div class=\\\"total-con\\\">\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col>\\n        <h3>Cart Items ({{cart.length}})</h3>\\n      </ion-col>\\n      <ion-col size=\\\"5\\\">\\n        <ion-button (click)=\\\"reset()\\\" fill=\\\"clear\\\" shape=\\\"round\\\" color=\\\"danger\\\" expand=\\\"full\\\" size=\\\"small\\\">\\n          <ion-icon name=\\\"trash\\\" slot=\\\"start\\\"></ion-icon>\\n          <ion-label>Empty</ion-label>\\n        </ion-button>\\n      </ion-col>\\n    </ion-row>\\n    <ion-row>\\n      <ion-col>\\n        <ion-text color=\\\"danger\\\">\\n          <p>Total: &#8358;{{currency.formatCurrency(total.toString())}}</p>\\n        </ion-text>\\n      </ion-col>\\n      <ion-col size=\\\"5\\\">\\n        <ion-button (click)=\\\"placeOrder()\\\" color=\\\"danger\\\" expand=\\\"full\\\" shape=\\\"round\\\" size=\\\"small\\\">\\n          <ion-icon name=\\\"card\\\" slot=\\\"start\\\"></ion-icon>\\n          <ion-label>Pay</ion-label>\\n        </ion-button>\\n      </ion-col>\\n    </ion-row>\\n  </ion-grid>\\n</div>\\n\\n<ion-content color=\\\"light\\\">\\n  <div id=\\\"cart\\\">\\n\\n    <ion-card *ngIf=\\\"cart.length < 1\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col>\\n            <ion-item lines=\\\"none\\\">\\n              <ion-icon name=\\\"sad\\\" slot=\\\"start\\\" color=\\\"medium\\\"></ion-icon>\\n              <ion-label color=\\\"medium\\\">Empty Cart</ion-label>\\n            </ion-item>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card>\\n\\n    <ion-card *ngFor=\\\"let item of cart\\\">\\n      <ion-grid>\\n        <ion-row>\\n          <ion-col size=\\\"2\\\">\\n            <ion-icon class=\\\"media\\\" color=\\\"danger\\\" name=\\\"{{item.category == 'wear' ? 'shirt' : 'pizza'}}\\\"></ion-icon>\\n          </ion-col>\\n          <ion-col size=\\\"10\\\" wrap=\\\"no-wrap\\\">\\n            <ion-item lines=\\\"none\\\">\\n              <ion-label color=\\\"danger\\\">{{item.name}}</ion-label>\\n              <ion-button (click)=\\\"removeFromCart(item)\\\" slot=\\\"end\\\" fill=\\\"clear\\\" shape=\\\"round\\\" color=\\\"danger\\\">\\n                <ion-icon name=\\\"trash\\\"></ion-icon>\\n              </ion-button>\\n            </ion-item>\\n            <ion-row>\\n              <ion-col>\\n                <ion-label class=\\\"price\\\">&#8358;{{currency.formatCurrency(item.price * item.quantity)}}</ion-label>\\n              </ion-col>\\n              <ion-col size=\\\"2\\\">\\n                <ion-input class=\\\"qty\\\" placeholder=\\\"Qty\\\" type=\\\"number\\\" min=\\\"1\\\" [value]=\\\"item.quantity\\\" [max]=\\\"item.available\\\" (ionChange)=\\\"setQuantity($event, item)\\\"></ion-input>\\n              </ion-col>\\n            </ion-row>\\n          </ion-col>\\n        </ion-row>\\n      </ion-grid>\\n    </ion-card>\\n    <br/>\\n  </div>\\n  <br/>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NhcnQvY2FydC5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport {ControllerService} from '../services/controller.service';\nimport {AlertService} from '../services/alert.service';\nimport {ConstantsService} from '../services/constants.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.page.html',\n  styleUrls: ['./cart.page.scss'],\n})\nexport class CartPage implements OnInit {\n\n  cart: any[] = this.api.getCart();\n  total = 0;\n\n  constructor(private api: ControllerService, private toast: AlertService, private router: Router, private currency: ConstantsService) { }\n\n  ngOnInit() {\n    this.calculateTotal();\n  }\n\n  calculateTotal() {\n    this.total = 0;\n    this.cart.forEach((item: any) => {\n      const subTotal = item.price * item.quantity;\n      this.total += subTotal;\n    });\n  }\n\n  setQuantity($event: CustomEvent, item: any) {\n    item.quantity = $event.detail.value;\n    this.calculateTotal();\n    this.api.updateCart(this.cart);\n  }\n\n  removeFromCart(item: any) {\n    this.cart = this.cart.filter((val: any) => val.id !== item.id);\n    this.calculateTotal();\n    this.api.updateCart(this.cart);\n  }\n\n  reset() {\n    this.api.resetCart();\n    this.cart = this.api.getCart();\n    this.toast.show('Cart Emptied.');\n    this.calculateTotal();\n  }\n\n  placeOrder() {\n    const order = this.api.createOrder({\n      payment: true,\n      total: this.total,\n      products: this.cart,\n      createdAt: new Date().toLocaleDateString(),\n    });\n    this.api.makePay(order, true);\n    this.api.resetCart();\n    this.router.navigateByUrl('/my-orders');\n  }\n\n}\n"],"sourceRoot":""}